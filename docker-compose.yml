version: '3.8'

services:
  # PostgreSQL database with pgvector extension
  db:
    image: pgvector/pgvector:pg15
    container_name: portfolio_db
    env_file: 
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - portfolio_network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: portfolio_redis
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio_network

  # Django web application
  web:
    build: 
      context: .
      dockerfile: ./docker/Dockerfile.django
    container_name: portfolio_web
    depends_on:
      - db
      - redis
    env_file:
      - .env
    volumes:
      - ./django_app/src:/app
      - ./shared:/shared
      - ./data_pipeline:/data_pipeline
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    networks:
      - portfolio_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # FastAPI RAG service
  rag:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.rag
    container_name: portfolio_rag
    env_file:
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - ./rag_service/src:/app
      - ./shared:/shared
    ports:
      - "8001:8001"
    networks:
      - portfolio_network
    command: uvicorn api.main:app --host 0.0.0.0 --port 8001 --reload

  # Celery worker for background tasks
  celery:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.django
    container_name: portfolio_celery
    depends_on:
      - db
      - redis
    env_file: 
      - .env
    volumes:
      - ./django_app/src:/app
      - ./shared:/shared
      - ./data_pipeline:/data_pipeline
      - media_volume:/app/media
    networks:
      - portfolio_network
    command: celery -A portfolio_project worker --loglevel=info

  # Celery beat for periodic tasks
  celery-beat:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.django
    container_name: portfolio_celery_beat
    depends_on:
      - db
      - redis
    env_file: 
      - .env
    volumes:
      - ./django_app/src:/app
      - ./shared:/shared
      - ./data_pipeline:/data_pipeline
    networks:
      - portfolio_network
    command: celery -A portfolio_project beat --loglevel=info

  # Flower for monitoring Celery tasks
  flower:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.django
    container_name: portfolio_flower
    depends_on:
      - redis
    env_file: 
      - .env
    ports:
      - "5555:5555"
    networks:
      - portfolio_network
    command: celery -A portfolio_project flower --port=5555

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: portfolio_nginx
    depends_on:
      - web
      - rag
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/staticfiles
      - media_volume:/media
    networks:
      - portfolio_network

volumes:
  postgres_data:
  redis_data:
  media_volume:
  static_volume:

networks:
  portfolio_network:
    driver: bridge